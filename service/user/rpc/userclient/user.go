// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package userclient

import (
	"context"

	"web_game/service/user/rpc/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ReqBinding  = user.ReqBinding
	ReqLogin    = user.ReqLogin
	ReqUserInfo = user.ReqUserInfo
	ResBinding  = user.ResBinding
	ResLogin    = user.ResLogin
	ResUserInfo = user.ResUserInfo

	User interface {
		Login(ctx context.Context, in *ReqLogin, opts ...grpc.CallOption) (*ResLogin, error)
		Binding(ctx context.Context, in *ReqBinding, opts ...grpc.CallOption) (*ResBinding, error)
		UserInfo(ctx context.Context, in *ReqUserInfo, opts ...grpc.CallOption) (*ResUserInfo, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Login(ctx context.Context, in *ReqLogin, opts ...grpc.CallOption) (*ResLogin, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) Binding(ctx context.Context, in *ReqBinding, opts ...grpc.CallOption) (*ResBinding, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Binding(ctx, in, opts...)
}

func (m *defaultUser) UserInfo(ctx context.Context, in *ReqUserInfo, opts ...grpc.CallOption) (*ResUserInfo, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UserInfo(ctx, in, opts...)
}
